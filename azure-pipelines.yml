trigger:
- master
- dev

variables:
  Solution: 'Tooling'
  PackageVersion: $[format('0.5.0-{0}', variables['Build.BuildId'])]
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
- job: 'Linux'
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - task: 'DotNetCoreCLI@2'
    displayName: 'Build'
    inputs:
      command: 'build'
      projects: '$(Solution).sln'
      arguments: '--configuration Release /p:TreatWarningsAsErrors=True'
  - task: 'DotNetCoreCLI@2'
    displayName: 'Test'
    inputs:
      command: 'test'
      projects: '$(Solution).sln'
- job: 'OSX'
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: 'DotNetCoreCLI@2'
    displayName: 'Build'
    inputs:
      command: 'build'
      projects: '$(Solution).sln'
      arguments: '--configuration Release /p:TreatWarningsAsErrors=True'
  - task: 'DotNetCoreCLI@2'
    displayName: 'Test'
    inputs:
      command: 'test'
      projects: '$(Solution).sln'
- job: 'Windows'
  pool:
    vmImage: 'Windows-2019'
  steps:
  - pwsh: |
      if ($env:PackageVersionOverride) {
        Write-Host "overriding build version $env:PackageVersion -> $env:PackageVersionOverride"
        $env:PackageVersion = $env:PackageVersionOverride
      }
      Write-Host "build version set to $env:PackageVersion"
    env:
      PackageVersion: $(PackageVersion)
      PackageVersionOverride: $(PackageVersionOverride)
    displayName: 'Version'
  - task: 'DotNetCoreCLI@2'
    displayName: 'Build'
    inputs:
      command: 'pack'
      packagesToPack: '$(Solution).sln'
      arguments: '--configuration Release /p:TreatWarningsAsErrors=True'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'PackageVersion'
  - task: 'DotNetCoreCLI@2'
    displayName: 'Test'
    inputs:
      command: 'test'
      projects: '$(Solution).sln'
  - task: PowerShell@2
    displayName: 'Sign'
    inputs:
      filePath: build/sign-packages.ps1
    env:
      SignClientUser: $(SignClientUser)
      SignClientSecret: $(SignClientSecret)
      ArtifactDirectory: $(Build.ArtifactStagingDirectory)
    condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))
  - task: 'PublishBuildArtifacts@1'
    displayName: 'Publish'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'Packages'
      publishLocation: 'Container'
    condition: 'always()'
